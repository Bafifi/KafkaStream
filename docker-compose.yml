version: '3.8'

services:
  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka1_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka_network

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    ports:
      - "9094:9092"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka2_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka_network
    depends_on:
      - kafka1

  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    ports:
      - "9095:9092"
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka3_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka_network
    depends_on:
      - kafka1
      - kafka2

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9092,kafka3:9092
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka_network

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
    networks:
      - kafka_network
    restart: on-failure

  transformer-1:
    build:
      context: .
      dockerfile: Dockerfile.transformer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - producer
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
      - INSTANCE=1
    networks:
      - kafka_network
    restart: on-failure

  transformer-2:
    build:
      context: .
      dockerfile: Dockerfile.transformer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - producer
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
      - INSTANCE=2
    networks:
      - kafka_network
    restart: on-failure

  transformer-3:
    build:
      context: .
      dockerfile: Dockerfile.transformer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - producer
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
      - INSTANCE=3
    networks:
      - kafka_network
    restart: on-failure

  publisher-1:
    build:
      context: .
      dockerfile: Dockerfile.publisher
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - transformer-1
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
      - INSTANCE=1
    volumes:
      - ./output:/app/output
    networks:
      - kafka_network
    restart: on-failure

  publisher-2:
    build:
      context: .
      dockerfile: Dockerfile.publisher
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - transformer-1
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
      - INSTANCE=2
    volumes:
      - ./output:/app/output
    networks:
      - kafka_network
    restart: on-failure

  publisher-3:
    build:
      context: .
      dockerfile: Dockerfile.publisher
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - transformer-1
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092
      - INSTANCE=3
    volumes:
      - ./output:/app/output
    networks:
      - kafka_network
    restart: on-failure

networks:
  kafka_network:
    driver: bridge

volumes:
  kafka1_data:
    driver: local
  kafka2_data:
    driver: local
  kafka3_data:
    driver: local